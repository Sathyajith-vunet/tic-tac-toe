{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["validSequence","App","useState","xList","setXList","oList","setOList","xTurn","setXTurn","winner","setWinner","draw","setDraw","useEffect","length","i","a","b","c","includes","displayCell","cellNumber","id","value","className","onClick","oldState","onClickHandler","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAGMA,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGM,SAASC,IACtB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA4BN,mBAAS,IAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAAwBR,oBAAS,GAAjC,mBAAOS,EAAP,KAAaC,EAAb,KAeAC,qBAAU,WACR,GAAIV,EAAMW,QAAU,EAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAcc,OAAQC,IAAK,CAC7C,kBAAgBf,EAAce,GAA9B,GAAKC,EAAL,KAAQC,EAAR,KAAWC,EAAX,KACA,GAAIf,EAAMgB,SAASH,IAAMb,EAAMgB,SAASF,IAAMd,EAAMgB,SAASD,GAAI,CAC/DR,EAAU,KACV,MACK,GACLL,EAAMc,SAASH,IACfX,EAAMc,SAASF,IACfZ,EAAMc,SAASD,GACf,CACAR,EAAU,KACV,MACSP,EAAMW,OAAST,EAAMS,SAAW,IACzCJ,EAAU,IACVE,GAAQ,OAIb,CAACT,EAAOE,IAEX,IAAMe,EAAc,SAACC,GACnB,IA7BsBC,EA6BhBC,GA7BgBD,EA6BOD,EA5BzBlB,EAAMgB,SAASG,GAAY,IACtBjB,EAAMc,SAASG,GAAY,IACxB,IA2BZ,OACE,wBACEE,UAAU,aACVC,QAAS,kBAxCQ,SAACH,GAClBf,EAAOH,GAAS,SAACsB,GAAD,4BAAkBA,GAAlB,CAA4BJ,OAC3ChB,GAAS,SAACoB,GAAD,4BAAkBA,GAAlB,CAA4BJ,OAE1Cd,GAAUD,GAoCSoB,CAAeN,IAC9BO,SAAoB,KAAVL,GAA2B,KAAXd,EAH5B,SAKGc,KAaP,OACE,sBAAKC,UAAU,MAAf,UACGjB,GAAS,qBAAKiB,UAAU,cAAf,+BACRjB,GAAS,qBAAKiB,UAAU,cAAf,8BACX,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,MAAf,UACGJ,EAAY,GACZA,EAAY,GACZA,EAAY,MAEf,sBAAKI,UAAU,MAAf,UACGJ,EAAY,GACZA,EAAY,GACZA,EAAY,MAEf,sBAAKI,UAAU,MAAf,UACGJ,EAAY,GACZA,EAAY,GACZA,EAAY,SAGL,KAAXX,GAAiB,qBAAKe,UAAU,SAAf,mBAA4Bf,EAA5B,qBACjBE,GAAQ,qBAAKa,UAAU,SAAf,0BACT,wBAAQA,UAAU,eAAeC,QAAS,kBA9B5CrB,EAAS,IACTE,EAAS,IACTE,GAAS,GACTE,EAAU,SACVE,GAAQ,IA0BN,sBCpGN,IAYeiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cecd0e1a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nconst validSequence = [\n  [1, 2, 3],\n  [1, 5, 9],\n  [1, 4, 7],\n  [2, 5, 8],\n  [3, 5, 7],\n  [3, 6, 9],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nexport default function App() {\n  const [xList, setXList] = useState([]);\n  const [oList, setOList] = useState([]);\n  const [xTurn, setXTurn] = useState(true);\n  const [winner, setWinner] = useState(\"\");\n  const [draw, setDraw] = useState(false);\n\n  const onClickHandler = (id) => {\n    if (xTurn) setXList((oldState) => [...oldState, id]);\n    else setOList((oldState) => [...oldState, id]);\n\n    setXTurn(!xTurn);\n  };\n\n  const determineValue = (id) => {\n    if (xList.includes(id)) return \"X\";\n    else if (oList.includes(id)) return \"O\";\n    else return \"\";\n  };\n\n  useEffect(() => {\n    if (xList.length >= 3) {\n      for (let i = 0; i < validSequence.length; i++) {\n        let [a, b, c] = validSequence[i];\n        if (xList.includes(a) && xList.includes(b) && xList.includes(c)) {\n          setWinner(\"X\");\n          break;\n        } else if (\n          oList.includes(a) &&\n          oList.includes(b) &&\n          oList.includes(c)\n        ) {\n          setWinner(\"O\");\n          break;\n        } else if (xList.length + oList.length === 9) {\n          setWinner(\"\");\n          setDraw(true);\n        }\n      }\n    }\n  }, [xList, oList]);\n\n  const displayCell = (cellNumber) => {\n    const value = determineValue(cellNumber);\n    return (\n      <button\n        className=\"singleCell\"\n        onClick={() => onClickHandler(cellNumber)}\n        disabled={value !== \"\" || winner !== \"\"}\n      >\n        {value}\n      </button>\n    );\n  };\n\n  const handleReset = () => {\n    setXList([]);\n    setOList([]);\n    setXTurn(true);\n    setWinner(\"\");\n    setDraw(false);\n  };\n\n  return (\n    <div className=\"App\">\n      {xTurn && <div className=\"turn-header\">X's turn to play</div>}\n      {!xTurn && <div className=\"turn-header\">O's turn to play</div>}\n      <div className=\"outter-square\">\n        <div className=\"row\">\n          {displayCell(1)}\n          {displayCell(2)}\n          {displayCell(3)}\n        </div>\n        <div className=\"row\">\n          {displayCell(4)}\n          {displayCell(5)}\n          {displayCell(6)}\n        </div>\n        <div className=\"row\">\n          {displayCell(7)}\n          {displayCell(8)}\n          {displayCell(9)}\n        </div>\n      </div>\n      {winner !== \"\" && <div className=\"result\">{`${winner} is the winner.`}</div>}\n      {draw && <div className=\"result\">It's a draw.</div>}\n      <button className=\"reset-button\" onClick={() => handleReset()}>\n        Reset\n      </button>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}